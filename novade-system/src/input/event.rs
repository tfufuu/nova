// src/input/event.rs

/// Represents the state of a keyboard key or mouse button.
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum KeyState {
    /// The key or button is pressed.
    Pressed,
    /// The key or button is released.
    Released,
}

/// Represents the state of a mouse button.
/// (Currently identical to KeyState, but kept separate for semantic distinction if needed later)
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum ButtonState {
    /// The button is pressed.
    Pressed,
    /// The button is released.
    Released,
}

/// Represents the state of modifier keys (Shift, Ctrl, Alt, Logo).
#[derive(Debug, Default, Clone, Copy, PartialEq, Eq)]
pub struct Modifiers {
    /// True if a Shift key (Left or Right) is pressed.
    pub shift: bool,
    /// True if a Control key (Left or Right) is pressed.
    pub ctrl: bool,
    /// True if an Alt key (Left or Right) is pressed.
    pub alt: bool,
    /// True if a Logo key (e.g., Windows, Super, Command) is pressed.
    pub logo: bool,
}

/// Represents various types of input events generated by input devices.
#[derive(Debug, Clone, PartialEq)]
pub enum InputEvent {
    /// A keyboard event, indicating a key press or release.
    Keyboard {
        /// The raw key code, typically from an input system like `libinput` or `xkbcommon`.
        key_code: u32,
        /// The state of the key (pressed or released).
        state: KeyState,
        /// The state of modifier keys at the time of the event.
        modifiers: Modifiers,
    },
    /// Pointer motion event, indicating relative movement of the pointer.
    PointerMotion {
        /// Change in X-coordinate since the last motion event.
        delta_x: f64,
        /// Change in Y-coordinate since the last motion event.
        delta_y: f64,
        /// The state of modifier keys at the time of the event.
        modifiers: Modifiers,
    },
    /// Pointer button event, indicating a mouse button press or release.
    PointerButton {
        /// The raw button code (e.g., BTN_LEFT, BTN_RIGHT).
        button_code: u32,
        /// The state of the button (pressed or released).
        state: ButtonState,
        /// The state of modifier keys at the time of the event.
        modifiers: Modifiers,
    },
    /// Pointer axis event, typically representing scroll wheel movement.
    PointerAxis {
        /// Amount of horizontal scroll. Positive values usually mean right, negative left.
        horizontal: f64,
        /// Amount of vertical scroll. Positive values usually mean down, negative up.
        vertical: f64,
        /// The state of modifier keys at the time of the event.
        modifiers: Modifiers,
    },
    /// Touch down event, indicating a new touch point on a touch surface.
    TouchDown {
        /// Unique identifier for the touch point.
        touch_id: u32,
        /// X-coordinate of the touch point, often normalized or in surface coordinates.
        x: f64,
        /// Y-coordinate of the touch point, often normalized or in surface coordinates.
        y: f64,
        /// The state of modifier keys at the time of the event.
        modifiers: Modifiers,
    },
    /// Touch motion event, indicating movement of an existing touch point.
    TouchMotion {
        /// Unique identifier for the touch point.
        touch_id: u32,
        /// New X-coordinate of the touch point.
        x: f64,
        /// New Y-coordinate of the touch point.
        y: f64,
        /// The state of modifier keys at the time of the event.
        modifiers: Modifiers,
    },
    /// Touch up event, indicating that a touch point has been lifted.
    TouchUp {
        /// Unique identifier for the touch point that was lifted.
        touch_id: u32,
        /// The state of modifier keys at the time of the event.
        modifiers: Modifiers,
    },
    // Clipboard shortcuts, processed by the server.
    /// Ctrl+C was pressed.
    CopyShortcut,
    /// Ctrl+V was pressed.
    PasteShortcut,
}
